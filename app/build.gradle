apply plugin: 'com.android.application'
apply plugin: 'kotlin-android'
apply plugin: 'kotlin-android-extensions'
apply plugin: 'kotlin-kapt'
apply plugin: 'dagger.hilt.android.plugin'

android {
    compileSdkVersion rootProject.ext.android["compileSdkVersion"]
    buildToolsVersion rootProject.ext.android["buildToolsVersion"]
    defaultConfig {
        applicationId rootProject.ext.android["applicationId"]
        minSdkVersion rootProject.ext.android["minSdkVersion"]
        targetSdkVersion rootProject.ext.android["targetSdkVersion"]
        versionCode rootProject.ext.android["versionCode"]
        versionName rootProject.ext.android["versionName"]

        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"

        //添加到此处
        multiDexEnabled true

        android.applicationVariants.all {
            variant ->
                variant.outputs.all {
                    if (variant.buildType.name == "debug") {
                        // 此处指定生成的apk文件名
                        def newName = "aachulk" + "_v" + rootProject.ext.android["versionName"] + ".dev" + rootProject.ext.test["BUILD_VERSION"] + ".apk"
                        outputFileName = newName
                    } else if (variant.buildType.name == "lytest") {
                        // 此处指定生成的apk文件名
                        def newName = "aachulk" + "_v" + rootProject.ext.android["versionName"] + ".beta" + rootProject.ext.test["BUILD_VERSION"] + ".apk"
                        outputFileName = newName
                    } else {
                        // 此处指定生成的apk文件名
                        def newName = "aachulk" + "_v" + rootProject.ext.android["versionName"] + ".apk"
                        outputFileName = newName
                    }
                }
        }

        //ARouter添加的
        kapt {
            arguments {
                arg("AROUTER_MODULE_NAME", project.getName())
            }
        }

    }

    signingConfigs {
        release {
            File strFile = new File("../key/aachulk.jks")
            storeFile file(strFile)
            storePassword "aachulk"
            keyPassword "aachulk"
            keyAlias "aachulk"
        }
    }

    buildTypes {
        debug {
            debuggable true
//            resValue 'string', 'app_name', "${rootProject.ext.devConfigs["APP_NAME"]}"
            buildConfigField "String", "BASE_URL", "new StringBuilder(\"${String.valueOf(rootProject.ext.allConfigs["BASE_URL_DEV"]).trim()}/\").toString()"
            buildConfigField "String", "ENV", "\"${rootProject.ext.devConfigs["ENV"]}\""
            buildConfigField "String", "H5_URL", "new StringBuilder(\"${String.valueOf(rootProject.ext.allConfigs["H5_URL_TEST"]).trim()}/\").toString()"
            buildConfigField "String", "SOCKET_URL", "new StringBuilder(\"${String.valueOf(rootProject.ext.allConfigs["SOCKET_URL_TEST"]).trim()}\").toString()"

        }
        release {
            debuggable false
//            resValue 'string', 'app_name', "${rootProject.ext.releaseConfigs["APP_NAME"]}"
            buildConfigField "String", "BASE_URL", "new StringBuilder(\"${String.valueOf(rootProject.ext.allConfigs["BASE_URL_RELEASE"]).trim()}/\").toString()"
            buildConfigField "String", "ENV", "\"${rootProject.ext.releaseConfigs["ENV"]}\""
            buildConfigField "String", "H5_URL", "new StringBuilder(\"${String.valueOf(rootProject.ext.allConfigs["H5_URL_RELEASE"]).trim()}/\").toString()"
            buildConfigField "String", "SOCKET_URL", "new StringBuilder(\"${String.valueOf(rootProject.ext.allConfigs["SOCKET_URL_RELEASE"]).trim()}\").toString()"

        }
        lytest {
            debuggable true
//            resValue 'string', 'app_name', "${rootProject.ext.testConfigs["APP_NAME"]}"
            buildConfigField "String", "BASE_URL", "new StringBuilder(\"${String.valueOf(rootProject.ext.allConfigs["BASE_URL_TEST"]).trim()}/\").toString()"
            buildConfigField "String", "ENV", "\"${rootProject.ext.testConfigs["ENV"]}\""
            buildConfigField "String", "H5_URL", "new StringBuilder(\"${String.valueOf(rootProject.ext.allConfigs["H5_URL_TEST"]).trim()}/\").toString()"
            buildConfigField "String", "SOCKET_URL", "new StringBuilder(\"${String.valueOf(rootProject.ext.allConfigs["SOCKET_URL_TEST"]).trim()}\").toString()"

        }

        all {
            minifyEnabled false
            signingConfig signingConfigs.release
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
            buildConfigField "String", "MOCK_URL", "\"${String.valueOf(rootProject.ext.allConfigs["MOCK_URL"]).trim()}/\""
            buildConfigField "String", "BUILD_VERSION", "\"${rootProject.ext.test["BUILD_VERSION"]}\""

        }
    }

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }

    kotlinOptions { jvmTarget = "1.8" }

    kapt {
//        correctErrorTypes true
        arguments {
            arg("AROUTER_MODULE_NAME", project.getName())
        }
    }

    lintOptions {
        abortOnError false
    }

}

dependencies {
    implementation fileTree(dir: "libs", include: ["*.jar", "*.aar"])
    //hulk引入
//    api project(path: ':libhulk')
    api rootProject.ext.dependencies["aachulk"]
    //通用类
    api rootProject.ext.dependencies["arouter"]
    kapt rootProject.ext.dependencies["arouter_compiler"]
    kapt rootProject.ext.dependencies["glide_compiler"]
    api rootProject.ext.dependencies["activity"]
    api rootProject.ext.dependencies["fragment_ktx"]
    //hilt
    api rootProject.ext.dependencies["hilt_android"]
    kapt rootProject.ext.dependencies["hilt_android_compiler"]
    api rootProject.ext.dependencies["hilt_lifecycle_viewmodel"]
    kapt rootProject.ext.dependencies["hilt_compiler"]
    //消息总线
    api rootProject.ext.dependencies["live_event_bus"]
    //xpopup
    api rootProject.ext.dependencies["xpopup"]
    //snackbar
    api rootProject.ext.dependencies["snackbar"]
    //multidex
    api rootProject.ext.dependencies["multidex"]

}



